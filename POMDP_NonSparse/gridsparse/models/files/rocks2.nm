pomdp

observables
started, r1taken, r1lastobs , r2taken, r2lastobs, done, x, y
endobservables

const int N;
const int xMAX = N-1;
const int yMAX = N-1;
const int xMIN = 0;
const int yMIN = 0;
const double slippery = 0.0;
// Rock positions
const r1x = xMIN+1;
const r1y = yMAX-1;
const r2x = 1;
const r2y = floor(yMAX/2);
// How likely is a rock a good rock
const double goodrock = 0.5;
// We are done when we reach max x location
formula finished = started & x = xMAX;
formula good = finished & done & ((!r1qual & !r2qual ) | (r1taken | r2taken ));
observable "seefinish" = finished;
// Distance between r1 and the robot
formula r1dist = max(r1x-x,x-r1x) + max(r1y-y,y-r1y);
// max distance
formula maxdist = xMAX-xMIN+yMAX-yMIN;
// Distance between r1 and the robot
formula r2dist = max(r2x-x,x-r2x) + max(r2y-y,y-r2y);
formula bad = (r1taken & !r1qual) | (r2taken & !r2qual);
observable "seebad" = bad;
observable "seegood" = good;

observable "atr1" = r1dist <= 0;
observable "atr2" = r2dist <= 0;
observable "nearr1" = r1dist <= 1;
observable "nearr2" = r2dist <= 1;
formula normdistr1 = (r1dist <= 1) ? 1 : 2; //min(1+((r1dist-1)/maxdist),1.0);
formula normdistr2 = (r2dist <= 1) ? 1 : 2; //min(1+((r2dist-1)/maxdist),1.0);

module master
    started : bool init false;
    done : bool init false;

    [placement] !started -> (started'=true);
    [north] started & !done -> true;
    [south] started  & !done -> true;
    [east] started  & !done-> true;
    [west] started & !done -> true;
    [finish] finished | done -> (done'=true);
endmodule

module rock1
    r1qual : bool init false;
    r1taken : bool init false;
    r1lastobs : bool init false;
    [placement] true -> goodrock : (r1qual'=true) + (1-goodrock) : (r1qual'=false);

    [r1sample] started & !done & r1dist=0 & !r1taken  -> 1:(r1taken'=(x = r1x & y = r1y & !r1taken));
    [r1sense] started & !r1taken & !done -> (1/normdistr1): (r1lastobs'=r1qual) +  (1-(1/normdistr1)): (r1lastobs'=!r1qual);
    [north] true -> (r1lastobs'=false);
    [south] true -> (r1lastobs'=false);
    [east] true -> (r1lastobs'=false);
    [west] true -> (r1lastobs'=false);
endmodule

module rock2 = rock1[r1sample=r2sample, r1sense=r2sense, r1x = r2x, r1y = r2y, r1qual=r2qual,r1taken=r2taken,r1lastobs=r2lastobs,r1dist=r2dist,normdistr1=normdistr2] endmodule

module robot
    x : [xMIN..xMAX] init 0;
    y : [yMIN..yMAX] init 0;

    [west] true -> (1-slippery): (x'=max(x-1,xMIN)) + slippery: (x'=max(x-2,xMIN));
    [east] true -> (1-slippery): (x'=min(x+1,xMAX)) + slippery: (x'=min(x+2,xMAX));
    [south]  true -> (1-slippery): (y'=min(y+1,yMAX)) + slippery: (y'=min(y+2,yMAX));
    [north]  true -> (1-slippery): (y'=max(y-1,yMIN)) + slippery: (y'=max(y-2,yMIN));
endmodule

label "goal" = finished;
label "rockposition" = (!r1taken & r1x = x & r1y = y) | (!r2taken & r2x = x & r2y = y);
label "notbad" = !bad;

rewards "costs"
    [north] true : 0;
    [south] true : 0;
    [west] true : 0;
    [east] true : 0;
    [r1sense] true : 0;
    [r1sample] r1qual=false : 10;
    [r2sense] true : 0;
    [r2sample] r2qual=false : 10;
endrewards

rewards "gains"
    finished = true : 10;
    [north] !r1qual & !r2qual : 0.1/N*(1.0*N-(xMAX-x));
    [south] !r1qual & !r2qual : 0.1/N*(1.0*N-(xMAX-x));
    [west] !r1qual & !r2qual : 0.1/N*(1.0*N-(xMAX-x));
    [east] !r1qual & !r2qual : 0.1/N*(1.0*N-(xMAX-x));
    [north] r1qual : 0.1/N*(2.0*N-max(r1x-x,x-r1x)-max(r1y-y,y-r1y));
    [south] r1qual : 0.1/N*(2.0*N-max(r1x-x,x-r1x)-max(r1y-y,y-r1y));
    [west]  r1qual : 0.1/N*(2.0*N-max(r1x-x,x-r1x)-max(r1y-y,y-r1y));
    [east]  r1qual : 0.1/N*(2.0*N-max(r1x-x,x-r1x)-max(r1y-y,y-r1y));
    [north] r2qual : 0.1/N*(2.0*N-max(r2x-x,x-r2x)-max(r2y-y,y-r2y));
    [south] r2qual : 0.1/N*(2.0*N-max(r2x-x,x-r2x)-max(r2y-y,y-r2y));
    [west]  r2qual : 0.1/N*(2.0*N-max(r2x-x,x-r2x)-max(r2y-y,y-r2y));
    [east]  r2qual : 0.1/N*(2.0*N-max(r2x-x,x-r2x)-max(r2y-y,y-r2y));
    [r1sample] r1qual=true : 10;
    [r2sample] r2qual=true : 10;
endrewards
